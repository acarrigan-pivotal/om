// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/pivotal-cf/om/api"
)

type CredentialReferencesService struct {
	ListCredentialsStub        func(deployedProductGUID string) (api.CredentialReferencesOutput, error)
	listCredentialsMutex       sync.RWMutex
	listCredentialsArgsForCall []struct {
		deployedProductGUID string
	}
	listCredentialsReturns struct {
		result1 api.CredentialReferencesOutput
		result2 error
	}
	listCredentialsReturnsOnCall map[int]struct {
		result1 api.CredentialReferencesOutput
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *CredentialReferencesService) ListCredentials(deployedProductGUID string) (api.CredentialReferencesOutput, error) {
	fake.listCredentialsMutex.Lock()
	ret, specificReturn := fake.listCredentialsReturnsOnCall[len(fake.listCredentialsArgsForCall)]
	fake.listCredentialsArgsForCall = append(fake.listCredentialsArgsForCall, struct {
		deployedProductGUID string
	}{deployedProductGUID})
	fake.recordInvocation("ListCredentials", []interface{}{deployedProductGUID})
	fake.listCredentialsMutex.Unlock()
	if fake.ListCredentialsStub != nil {
		return fake.ListCredentialsStub(deployedProductGUID)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listCredentialsReturns.result1, fake.listCredentialsReturns.result2
}

func (fake *CredentialReferencesService) ListCredentialsCallCount() int {
	fake.listCredentialsMutex.RLock()
	defer fake.listCredentialsMutex.RUnlock()
	return len(fake.listCredentialsArgsForCall)
}

func (fake *CredentialReferencesService) ListCredentialsArgsForCall(i int) string {
	fake.listCredentialsMutex.RLock()
	defer fake.listCredentialsMutex.RUnlock()
	return fake.listCredentialsArgsForCall[i].deployedProductGUID
}

func (fake *CredentialReferencesService) ListCredentialsReturns(result1 api.CredentialReferencesOutput, result2 error) {
	fake.ListCredentialsStub = nil
	fake.listCredentialsReturns = struct {
		result1 api.CredentialReferencesOutput
		result2 error
	}{result1, result2}
}

func (fake *CredentialReferencesService) ListCredentialsReturnsOnCall(i int, result1 api.CredentialReferencesOutput, result2 error) {
	fake.ListCredentialsStub = nil
	if fake.listCredentialsReturnsOnCall == nil {
		fake.listCredentialsReturnsOnCall = make(map[int]struct {
			result1 api.CredentialReferencesOutput
			result2 error
		})
	}
	fake.listCredentialsReturnsOnCall[i] = struct {
		result1 api.CredentialReferencesOutput
		result2 error
	}{result1, result2}
}

func (fake *CredentialReferencesService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.listCredentialsMutex.RLock()
	defer fake.listCredentialsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *CredentialReferencesService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
