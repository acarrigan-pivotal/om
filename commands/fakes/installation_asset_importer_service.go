// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/pivotal-cf/om/api"
)

type InstallationAssetImporterService struct {
	UploadInstallationAssetCollectionStub        func(api.ImportInstallationInput) error
	uploadInstallationAssetCollectionMutex       sync.RWMutex
	uploadInstallationAssetCollectionArgsForCall []struct {
		arg1 api.ImportInstallationInput
	}
	uploadInstallationAssetCollectionReturns struct {
		result1 error
	}
	uploadInstallationAssetCollectionReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *InstallationAssetImporterService) UploadInstallationAssetCollection(arg1 api.ImportInstallationInput) error {
	fake.uploadInstallationAssetCollectionMutex.Lock()
	ret, specificReturn := fake.uploadInstallationAssetCollectionReturnsOnCall[len(fake.uploadInstallationAssetCollectionArgsForCall)]
	fake.uploadInstallationAssetCollectionArgsForCall = append(fake.uploadInstallationAssetCollectionArgsForCall, struct {
		arg1 api.ImportInstallationInput
	}{arg1})
	fake.recordInvocation("UploadInstallationAssetCollection", []interface{}{arg1})
	fake.uploadInstallationAssetCollectionMutex.Unlock()
	if fake.UploadInstallationAssetCollectionStub != nil {
		return fake.UploadInstallationAssetCollectionStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.uploadInstallationAssetCollectionReturns.result1
}

func (fake *InstallationAssetImporterService) UploadInstallationAssetCollectionCallCount() int {
	fake.uploadInstallationAssetCollectionMutex.RLock()
	defer fake.uploadInstallationAssetCollectionMutex.RUnlock()
	return len(fake.uploadInstallationAssetCollectionArgsForCall)
}

func (fake *InstallationAssetImporterService) UploadInstallationAssetCollectionArgsForCall(i int) api.ImportInstallationInput {
	fake.uploadInstallationAssetCollectionMutex.RLock()
	defer fake.uploadInstallationAssetCollectionMutex.RUnlock()
	return fake.uploadInstallationAssetCollectionArgsForCall[i].arg1
}

func (fake *InstallationAssetImporterService) UploadInstallationAssetCollectionReturns(result1 error) {
	fake.UploadInstallationAssetCollectionStub = nil
	fake.uploadInstallationAssetCollectionReturns = struct {
		result1 error
	}{result1}
}

func (fake *InstallationAssetImporterService) UploadInstallationAssetCollectionReturnsOnCall(i int, result1 error) {
	fake.UploadInstallationAssetCollectionStub = nil
	if fake.uploadInstallationAssetCollectionReturnsOnCall == nil {
		fake.uploadInstallationAssetCollectionReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.uploadInstallationAssetCollectionReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *InstallationAssetImporterService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.uploadInstallationAssetCollectionMutex.RLock()
	defer fake.uploadInstallationAssetCollectionMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *InstallationAssetImporterService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
