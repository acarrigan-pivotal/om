// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/pivotal-cf/om/api"
)

type InstallationAssetDeleterService struct {
	DeleteInstallationAssetCollectionStub        func() (api.InstallationsServiceOutput, error)
	deleteInstallationAssetCollectionMutex       sync.RWMutex
	deleteInstallationAssetCollectionArgsForCall []struct{}
	deleteInstallationAssetCollectionReturns     struct {
		result1 api.InstallationsServiceOutput
		result2 error
	}
	deleteInstallationAssetCollectionReturnsOnCall map[int]struct {
		result1 api.InstallationsServiceOutput
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *InstallationAssetDeleterService) DeleteInstallationAssetCollection() (api.InstallationsServiceOutput, error) {
	fake.deleteInstallationAssetCollectionMutex.Lock()
	ret, specificReturn := fake.deleteInstallationAssetCollectionReturnsOnCall[len(fake.deleteInstallationAssetCollectionArgsForCall)]
	fake.deleteInstallationAssetCollectionArgsForCall = append(fake.deleteInstallationAssetCollectionArgsForCall, struct{}{})
	fake.recordInvocation("DeleteInstallationAssetCollection", []interface{}{})
	fake.deleteInstallationAssetCollectionMutex.Unlock()
	if fake.DeleteInstallationAssetCollectionStub != nil {
		return fake.DeleteInstallationAssetCollectionStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.deleteInstallationAssetCollectionReturns.result1, fake.deleteInstallationAssetCollectionReturns.result2
}

func (fake *InstallationAssetDeleterService) DeleteInstallationAssetCollectionCallCount() int {
	fake.deleteInstallationAssetCollectionMutex.RLock()
	defer fake.deleteInstallationAssetCollectionMutex.RUnlock()
	return len(fake.deleteInstallationAssetCollectionArgsForCall)
}

func (fake *InstallationAssetDeleterService) DeleteInstallationAssetCollectionReturns(result1 api.InstallationsServiceOutput, result2 error) {
	fake.DeleteInstallationAssetCollectionStub = nil
	fake.deleteInstallationAssetCollectionReturns = struct {
		result1 api.InstallationsServiceOutput
		result2 error
	}{result1, result2}
}

func (fake *InstallationAssetDeleterService) DeleteInstallationAssetCollectionReturnsOnCall(i int, result1 api.InstallationsServiceOutput, result2 error) {
	fake.DeleteInstallationAssetCollectionStub = nil
	if fake.deleteInstallationAssetCollectionReturnsOnCall == nil {
		fake.deleteInstallationAssetCollectionReturnsOnCall = make(map[int]struct {
			result1 api.InstallationsServiceOutput
			result2 error
		})
	}
	fake.deleteInstallationAssetCollectionReturnsOnCall[i] = struct {
		result1 api.InstallationsServiceOutput
		result2 error
	}{result1, result2}
}

func (fake *InstallationAssetDeleterService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deleteInstallationAssetCollectionMutex.RLock()
	defer fake.deleteInstallationAssetCollectionMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *InstallationAssetDeleterService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
