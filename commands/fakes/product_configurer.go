// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/pivotal-cf/om/api"
)

type ProductConfigurer struct {
	ListStagedProductsStub        func() (api.StagedProductsOutput, error)
	listStagedProductsMutex       sync.RWMutex
	listStagedProductsArgsForCall []struct{}
	listStagedProductsReturns     struct {
		result1 api.StagedProductsOutput
		result2 error
	}
	listStagedProductsReturnsOnCall map[int]struct {
		result1 api.StagedProductsOutput
		result2 error
	}
	ConfigureStub        func(api.ProductsConfigurationInput) error
	configureMutex       sync.RWMutex
	configureArgsForCall []struct {
		arg1 api.ProductsConfigurationInput
	}
	configureReturns struct {
		result1 error
	}
	configureReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ProductConfigurer) ListStagedProducts() (api.StagedProductsOutput, error) {
	fake.listStagedProductsMutex.Lock()
	ret, specificReturn := fake.listStagedProductsReturnsOnCall[len(fake.listStagedProductsArgsForCall)]
	fake.listStagedProductsArgsForCall = append(fake.listStagedProductsArgsForCall, struct{}{})
	fake.recordInvocation("ListStagedProducts", []interface{}{})
	fake.listStagedProductsMutex.Unlock()
	if fake.ListStagedProductsStub != nil {
		return fake.ListStagedProductsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listStagedProductsReturns.result1, fake.listStagedProductsReturns.result2
}

func (fake *ProductConfigurer) ListStagedProductsCallCount() int {
	fake.listStagedProductsMutex.RLock()
	defer fake.listStagedProductsMutex.RUnlock()
	return len(fake.listStagedProductsArgsForCall)
}

func (fake *ProductConfigurer) ListStagedProductsReturns(result1 api.StagedProductsOutput, result2 error) {
	fake.ListStagedProductsStub = nil
	fake.listStagedProductsReturns = struct {
		result1 api.StagedProductsOutput
		result2 error
	}{result1, result2}
}

func (fake *ProductConfigurer) ListStagedProductsReturnsOnCall(i int, result1 api.StagedProductsOutput, result2 error) {
	fake.ListStagedProductsStub = nil
	if fake.listStagedProductsReturnsOnCall == nil {
		fake.listStagedProductsReturnsOnCall = make(map[int]struct {
			result1 api.StagedProductsOutput
			result2 error
		})
	}
	fake.listStagedProductsReturnsOnCall[i] = struct {
		result1 api.StagedProductsOutput
		result2 error
	}{result1, result2}
}

func (fake *ProductConfigurer) Configure(arg1 api.ProductsConfigurationInput) error {
	fake.configureMutex.Lock()
	ret, specificReturn := fake.configureReturnsOnCall[len(fake.configureArgsForCall)]
	fake.configureArgsForCall = append(fake.configureArgsForCall, struct {
		arg1 api.ProductsConfigurationInput
	}{arg1})
	fake.recordInvocation("Configure", []interface{}{arg1})
	fake.configureMutex.Unlock()
	if fake.ConfigureStub != nil {
		return fake.ConfigureStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.configureReturns.result1
}

func (fake *ProductConfigurer) ConfigureCallCount() int {
	fake.configureMutex.RLock()
	defer fake.configureMutex.RUnlock()
	return len(fake.configureArgsForCall)
}

func (fake *ProductConfigurer) ConfigureArgsForCall(i int) api.ProductsConfigurationInput {
	fake.configureMutex.RLock()
	defer fake.configureMutex.RUnlock()
	return fake.configureArgsForCall[i].arg1
}

func (fake *ProductConfigurer) ConfigureReturns(result1 error) {
	fake.ConfigureStub = nil
	fake.configureReturns = struct {
		result1 error
	}{result1}
}

func (fake *ProductConfigurer) ConfigureReturnsOnCall(i int, result1 error) {
	fake.ConfigureStub = nil
	if fake.configureReturnsOnCall == nil {
		fake.configureReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.configureReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ProductConfigurer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.listStagedProductsMutex.RLock()
	defer fake.listStagedProductsMutex.RUnlock()
	fake.configureMutex.RLock()
	defer fake.configureMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ProductConfigurer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
