// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/pivotal-cf/om/api"
)

type CredentialsService struct {
	FetchCredentialStub        func(deployedProductGUID, credentialReference string) (api.CredentialOutput, error)
	fetchCredentialMutex       sync.RWMutex
	fetchCredentialArgsForCall []struct {
		deployedProductGUID string
		credentialReference string
	}
	fetchCredentialReturns struct {
		result1 api.CredentialOutput
		result2 error
	}
	fetchCredentialReturnsOnCall map[int]struct {
		result1 api.CredentialOutput
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *CredentialsService) FetchCredential(deployedProductGUID string, credentialReference string) (api.CredentialOutput, error) {
	fake.fetchCredentialMutex.Lock()
	ret, specificReturn := fake.fetchCredentialReturnsOnCall[len(fake.fetchCredentialArgsForCall)]
	fake.fetchCredentialArgsForCall = append(fake.fetchCredentialArgsForCall, struct {
		deployedProductGUID string
		credentialReference string
	}{deployedProductGUID, credentialReference})
	fake.recordInvocation("FetchCredential", []interface{}{deployedProductGUID, credentialReference})
	fake.fetchCredentialMutex.Unlock()
	if fake.FetchCredentialStub != nil {
		return fake.FetchCredentialStub(deployedProductGUID, credentialReference)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.fetchCredentialReturns.result1, fake.fetchCredentialReturns.result2
}

func (fake *CredentialsService) FetchCredentialCallCount() int {
	fake.fetchCredentialMutex.RLock()
	defer fake.fetchCredentialMutex.RUnlock()
	return len(fake.fetchCredentialArgsForCall)
}

func (fake *CredentialsService) FetchCredentialArgsForCall(i int) (string, string) {
	fake.fetchCredentialMutex.RLock()
	defer fake.fetchCredentialMutex.RUnlock()
	return fake.fetchCredentialArgsForCall[i].deployedProductGUID, fake.fetchCredentialArgsForCall[i].credentialReference
}

func (fake *CredentialsService) FetchCredentialReturns(result1 api.CredentialOutput, result2 error) {
	fake.FetchCredentialStub = nil
	fake.fetchCredentialReturns = struct {
		result1 api.CredentialOutput
		result2 error
	}{result1, result2}
}

func (fake *CredentialsService) FetchCredentialReturnsOnCall(i int, result1 api.CredentialOutput, result2 error) {
	fake.FetchCredentialStub = nil
	if fake.fetchCredentialReturnsOnCall == nil {
		fake.fetchCredentialReturnsOnCall = make(map[int]struct {
			result1 api.CredentialOutput
			result2 error
		})
	}
	fake.fetchCredentialReturnsOnCall[i] = struct {
		result1 api.CredentialOutput
		result2 error
	}{result1, result2}
}

func (fake *CredentialsService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.fetchCredentialMutex.RLock()
	defer fake.fetchCredentialMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *CredentialsService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
