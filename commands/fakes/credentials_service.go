// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/pivotal-cf/om/api"
)

type CredentialsService struct {
	GetDeployedProductCredentialStub        func(deployedProductGUID, credentialReference string) (api.CredentialOutput, error)
	getDeployedProductCredentialMutex       sync.RWMutex
	getDeployedProductCredentialArgsForCall []struct {
		deployedProductGUID string
		credentialReference string
	}
	getDeployedProductCredentialReturns struct {
		result1 api.CredentialOutput
		result2 error
	}
	getDeployedProductCredentialReturnsOnCall map[int]struct {
		result1 api.CredentialOutput
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *CredentialsService) GetDeployedProductCredential(deployedProductGUID string, credentialReference string) (api.CredentialOutput, error) {
	fake.getDeployedProductCredentialMutex.Lock()
	ret, specificReturn := fake.getDeployedProductCredentialReturnsOnCall[len(fake.getDeployedProductCredentialArgsForCall)]
	fake.getDeployedProductCredentialArgsForCall = append(fake.getDeployedProductCredentialArgsForCall, struct {
		deployedProductGUID string
		credentialReference string
	}{deployedProductGUID, credentialReference})
	fake.recordInvocation("GetDeployedProductCredential", []interface{}{deployedProductGUID, credentialReference})
	fake.getDeployedProductCredentialMutex.Unlock()
	if fake.GetDeployedProductCredentialStub != nil {
		return fake.GetDeployedProductCredentialStub(deployedProductGUID, credentialReference)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getDeployedProductCredentialReturns.result1, fake.getDeployedProductCredentialReturns.result2
}

func (fake *CredentialsService) GetDeployedProductCredentialCallCount() int {
	fake.getDeployedProductCredentialMutex.RLock()
	defer fake.getDeployedProductCredentialMutex.RUnlock()
	return len(fake.getDeployedProductCredentialArgsForCall)
}

func (fake *CredentialsService) GetDeployedProductCredentialArgsForCall(i int) (string, string) {
	fake.getDeployedProductCredentialMutex.RLock()
	defer fake.getDeployedProductCredentialMutex.RUnlock()
	return fake.getDeployedProductCredentialArgsForCall[i].deployedProductGUID, fake.getDeployedProductCredentialArgsForCall[i].credentialReference
}

func (fake *CredentialsService) GetDeployedProductCredentialReturns(result1 api.CredentialOutput, result2 error) {
	fake.GetDeployedProductCredentialStub = nil
	fake.getDeployedProductCredentialReturns = struct {
		result1 api.CredentialOutput
		result2 error
	}{result1, result2}
}

func (fake *CredentialsService) GetDeployedProductCredentialReturnsOnCall(i int, result1 api.CredentialOutput, result2 error) {
	fake.GetDeployedProductCredentialStub = nil
	if fake.getDeployedProductCredentialReturnsOnCall == nil {
		fake.getDeployedProductCredentialReturnsOnCall = make(map[int]struct {
			result1 api.CredentialOutput
			result2 error
		})
	}
	fake.getDeployedProductCredentialReturnsOnCall[i] = struct {
		result1 api.CredentialOutput
		result2 error
	}{result1, result2}
}

func (fake *CredentialsService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getDeployedProductCredentialMutex.RLock()
	defer fake.getDeployedProductCredentialMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *CredentialsService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
